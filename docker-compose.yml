version: '3.7'

services:
  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./:/app
    networks:
      - app-network
      - queue-network
      - db-network
    depends_on:
      - db
      - redis
      - laravel_echo_server

  #Nginx Service
  webserver:
    image: nginx:1.25.3-alpine
    restart: always
    ports:
      - "8002:8080"
    working_dir: /app
    volumes:
      - ./:/app
      - .docker/nginx/conf.d/:/etc/nginx/conf.d/
      - .docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:8080 || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - app
      - laravel_echo_server
    user: nginx

  # DB UI management service
  adminer:
    image: adminer:4.8.1
    restart: always
    ports:
      - 8003:8080
    networks:
      - db-network
    depends_on:
      - db
    user: adminer

  #MySQL Service
  db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - .docker/data/db:/var/lib/mysql/
    networks:
      - db-network
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 30s
      timeout: 10s
      retries: 5
    user: 1000:1000
      
  laravel_echo_server:
    build:
      context: .docker/laravel-echo
      dockerfile: Dockerfile
    volumes:
      - .env:/app/.env
      - ./laravel-echo-server.json:/app/laravel-echo-server.json
      - ./logs/laravel-echo:/app/logs
    restart: always
    networks:
      - queue-network # laravel echo needs to access to redis to take message and broadcast
      - app-network # laravel echo needs to access app network to authenticate through webserver
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:6001 || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - .docker/data/redis:/data
    restart: always
    networks:
      - queue-network
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    user: 1000:1000

#Docker Networks
networks:
  app-network:
    driver: bridge
  queue-network:
    driver: bridge
  db-network:
    driver: bridge
